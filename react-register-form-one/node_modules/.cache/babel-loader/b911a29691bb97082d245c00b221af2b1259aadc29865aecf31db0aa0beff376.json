{"ast":null,"code":"var _jsxFileName = \"/home/kumarprince1407/Desktop/tarams_training_projects/react-register-form-one/src/HomePage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  //Extract the username from the token stored in local storage\n  const token = localStorage.getItem(\"accessToken\");\n  const decodedToken = token ? JSON.parse(atob(token.split(\".\")[1])) : null;\n  /*\n  The atob function is a built-in JavaScript function that decodes a base64-encoded string.\n  In the case of JWTs, the token consists of three parts separated by dots (.). \n  The second part (index 1) is the payload, which is a base64-encoded JSON string \n  containing the claims. atob is used to decode this base64-encoded payload.\n  */\n  const username = decodedToken ? decodedToken.username : null;\n  const handleLogout = () => {\n    //Remove the token from local storage\n    localStorage.removeItem(\"accessToken\");\n\n    //Redirect to the login page\n    navigate(\"/\");\n  };\n  const navigateToLogin = () => {\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: username ? `Hello, ${username}! Welcome to your dashboard,` : `Login to view your homepage`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: username ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: navigateToLogin,\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"ZmJpvzBBf8J7VCgSKqUUk0eHjAY=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useLocation","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","HomePage","_s","location","navigate","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","username","handleLogout","removeItem","navigateToLogin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/kumarprince1407/Desktop/tarams_training_projects/react-register-form-one/src/HomePage.jsx"],"sourcesContent":["import React from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nfunction HomePage() {\n  const location = useLocation();\n\n  const navigate = useNavigate();\n\n  //Extract the username from the token stored in local storage\n  const token = localStorage.getItem(\"accessToken\");\n  const decodedToken = token ? JSON.parse(atob(token.split(\".\")[1])) : null;\n  /*\n  The atob function is a built-in JavaScript function that decodes a base64-encoded string.\n  In the case of JWTs, the token consists of three parts separated by dots (.). \n  The second part (index 1) is the payload, which is a base64-encoded JSON string \n  containing the claims. atob is used to decode this base64-encoded payload.\n  */\n  const username = decodedToken ? decodedToken.username : null;\n  const handleLogout = () => {\n    //Remove the token from local storage\n    localStorage.removeItem(\"accessToken\");\n\n    //Redirect to the login page\n    navigate(\"/\");\n  };\n\n  const navigateToLogin = () => {\n    navigate(\"/\");\n  };\n  return (\n    <div>\n      <h1>\n        {username\n          ? `Hello, ${username}! Welcome to your dashboard,`\n          : `Login to view your homepage`}\n      </h1>\n      <>\n        {username ? (\n          <button onClick={handleLogout}>Logout</button>\n        ) : (\n          <button onClick={navigateToLogin}>Log In</button>\n        )}\n      </>\n    </div>\n  );\n}\n\nexport default HomePage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC5D,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,QAAQ,GAAGR,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,MAAMC,YAAY,GAAGH,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EACzE;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQ,GAAGL,YAAY,GAAGA,YAAY,CAACK,QAAQ,GAAG,IAAI;EAC5D,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAR,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;;IAEtC;IACAX,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,MAAMY,eAAe,GAAGA,CAAA,KAAM;IAC5BZ,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EACD,oBACEN,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EACGJ,QAAQ,GACJ,UAASA,QAAS,8BAA6B,GAC/C;IAA4B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACLvB,OAAA,CAAAE,SAAA;MAAAiB,QAAA,EACGJ,QAAQ,gBACPf,OAAA;QAAQwB,OAAO,EAAER,YAAa;QAAAG,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAE9CvB,OAAA;QAAQwB,OAAO,EAAEN,eAAgB;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IACjD,gBACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEV;AAACnB,EAAA,CA1CQD,QAAQ;EAAA,QACEN,WAAW,EAEXC,WAAW;AAAA;AAAA2B,EAAA,GAHrBtB,QAAQ;AA4CjB,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}